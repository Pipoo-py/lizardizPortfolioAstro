--- 
import Skill from "./Skill.astro";
const totalSkills = {
  base: ["HTML", "CSS"],
  languages: ["JavaScript","Go", "SQL"],
  frameworksAndLibraries: ["React", "Astro", "Svelte"],
  utilities: ["Git", "Github"],
  next: ["Node"],
};
---
  
<section class="skills-section" id="skills">
    <h2 class="skills-section__title">
      Habilidades
    </h2>
    <div class="skills-section__container">
      <div class="skills-section__base-container skill-div">
        <h4> Esenciales </h4>
        {totalSkills.base.map(skill => (
            <Skill infoSkill={skill} /> 
        ))}
      </div>
      <div class="skills-section__lang-container skill-div">
        <h4> Lenguajes </h4>
        {totalSkills.languages.map(skill => (
          <Skill infoSkill={skill} />
        ))}
      </div>
      <div class="skills-section__libs-container skill-div">
        <h4> Frameworks o librerias </h4>
          {totalSkills.frameworksAndLibraries.map(skill => (
          <Skill infoSkill={skill} />
        ))}
      </div>
      <div class="skills-section__tools-container skill-div">
        <h4> Herramientas </h4>
        {totalSkills.utilities.map(skill => (
          <Skill infoSkill={skill} />
        ))}
      </div>
      <div class="skills-section__next-container skill-div">
      <h4> En aprendizaje </h4>
      {totalSkills.next.map(skill => (
      <Skill infoSkill={skill} />
      ))}
      </div>
    </div>
</section>

<script>

  function initializeSkillAnimations() {
    const supportsViewTimeline = 
      window.CSS && window.CSS.supports && window.CSS.supports('animation-timeline', 'view()');
      
    if (!supportsViewTimeline) {
    
      console.log("Fallback IntersectionObserver activado para .skill-div"); 
      const skillDivs = document.querySelectorAll('.skill-div'); 
      
      if (skillDivs.length === 0) {
      
        console.log("No se encontraron elementos '.skill-div' para observar.");
        return; 
        
      }
      const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1 
      };
      
      const observerCallback = (entries, observer) => {
      
        entries.forEach(entry => {
          entry.target.classList.toggle('is-visible', entry.isIntersecting);
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            observer.unobserve(entry.target);
          }
        });
        
      };
      const observer = new IntersectionObserver(observerCallback, observerOptions);
      skillDivs.forEach(div => observer.observe(div));
      
      document.addEventListener('astro:before-swap', () => {
        console.log("Desconectando IntersectionObserver antes del cambio de página.");
        observer.disconnect();
      }, { once: true });

    } else {
      console.log("animation-timeline: view() soportado, usando animación CSS nativa."); 
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSkillAnimations);
  } else { 
    initializeSkillAnimations();
  }

</script>

<style>
  .skills-section__title {
  padding: 48px;
  text-align: center;
  font-size: clamp(1.5rem, 50dvw, 2.5rem);
  animation-name: viewTitle;
  animation-timeline: view();
  animation-range: entry 30% cover 70%, cover 60% exit 100%;
  animation-fill-mode: both;
}

.skills-section__container {
  display: flex;
  gap: 1rem;
  justify-content: center;
  align-content: center;
  flex-wrap: wrap;
}

.skill-div {
  width: clamp(300px, 50dvw, 400px);
  padding: 64px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 1rem;
  border: 1px solid var(--acento-teal); 
  border-radius: 6px;

  opacity: 0;
  transform: translateY(30px) scale(0.9);
  filter: blur(2px);
  transition: opacity 0.6s ease-out, transform 0.6s ease-out, filter 0.6s ease-out;
}

.skill-div.is-visible {
  opacity: 1;
  transform: translateY(0) scale(1);
  filter: blur(0px);
}

@supports (animation-timeline: view()) {
  .skill-div {
    opacity: 0; 
    transform: none;
    filter: none;
    transition: none; 

    animation: fadeInOut linear;
    animation-timeline: view();
    animation-range: entry 20% cover 80%, cover 40% exit 100%;
    animation-fill-mode: backwards; 
  }

  @media screen and (max-width: 500px) {
    .skill-div {
       animation-name: fadeInOutMobile;
       animation-range: entry 20% exit 90%;
       animation-fill-mode: both;
    }
  }
}


.skill-div h4 {
  text-align: center;
  font-size: clamp(1rem, 50dvw, 1.5rem);
}

@media screen and (max-width: 500px){
  .skills-section__container{
    padding: 24px;
  }
}


@keyframes viewTitle {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeInOutMobile {
  0% { opacity: 0; transform: translateY(30px) scale(0.9); filter: blur(2px); }
  25%, 75% { opacity: 1; transform: translateY(0) scale(1); filter: blur(0px); }
  100% { opacity: 0; transform: translateY(-30px) scale(0.9); filter: blur(2px); }
}

@keyframes fadeInOut {
  0% { opacity: 0; transform: translateY(40px) scale(0.8); filter: blur(3px); }
  50% { opacity: 1; transform: translateY(0) scale(1); filter: blur(0px); }
  100% { opacity: 0; transform: translateY(-40px) scale(0.8); filter: blur(3px); }
}
</style>
